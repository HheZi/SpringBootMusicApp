networks:
  eureka-network:
    name: eureka-network
  album-network:
    name: album-network
  user-network:
    name: user-network
  auth-network:
    name: auth-network
  author-network:
   name: author-network    
  kafka-network:
   name: kafka-network
  track-network: 
   name: track-network
  playlist-network:
   name: playlist-network
volumes:
  album-db-volume:
  user-db-volume:
  auth-db-volume:
  author-db-volume:
  track-db-volume:
  playlist-db-volume:

services:
  eureka-server: 
    build: ./Backend/eureka-server/
    container_name: eureka-server
    ports:
      - 8761:8761
    networks:
      - eureka-network
  
  api-gateway:
    build: ./Backend/api-gateway/
    container_name: api-gateway
    ports:
      - 8080:8080
    depends_on:
      - eureka-server
    environment:
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - eureka-network

  album-db:
    image: postgres
    container_name: album-db
    volumes: 
    - album-db-volume:/var/lib/postgresql/data
    - ./Backend/album-service/init_script.sql:/docker-entrypoint-initdb.d/init_script.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=AlbumDB 
      - PGUSER=postgres
    networks:
      - album-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "AlbumDB"]
      interval: 30s
      timeout: 60s

  album-service:
    build: ./Backend/album-service/
    container_name: album-service
    environment:
      - server.ports=8085
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - file.temp=/home/app/temp/
      - spring.r2dbc.url=r2dbc:postgresql://album-db:5432/AlbumDB
      - spring.r2dbc.username=postgres
      - spring.r2dbc.password=postgres
      - logging.level.org.springframework.r2dbc=TRACE
      - logging.level.io.r2dbc.spi=TRACE
    networks:
      - eureka-network
      - album-network
    ports: 
      - 8085:8085
    depends_on:
      eureka-server:
        condition: service_started 
      album-db:
        condition: service_healthy

  audio-service:
    build: ./Backend/audio-service/
    container_name: audio-service
    environment:
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - audio.path=/home/app/audio/
    volumes:
      - ~/app/audio/:/audio
    networks:
      - eureka-network
    depends_on:
      - eureka-server
  
  image-service:
    build: ./Backend/image-service
    container_name: image-service
    environment:
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - image.default=/home/app/images/default_image.png
      - image.path=/home/app/images/
    volumes:
      - ~/app/images/:/images
    networks:
      - eureka-network
    depends_on:
      - eureka-server  

  user-db:
    image: postgres
    container_name: user-db
    volumes: 
    - user-db-volume:/var/lib/postgresql/data
    - ./Backend/user-service/init_script.sql:/docker-entrypoint-initdb.d/init_script.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=UserDB
      - PGUSER=postgres
    networks:
      - user-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "UserDB"]
      interval: 30s
      timeout: 60s  

  user-service:
    build: ./Backend/user-service
    container_name: user-service
    environment:
      - server.port=8084
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - spring.r2dbc.url=r2dbc:postgresql://user-db:5432/UserDB
      - spring.r2dbc.username=postgres
      - spring.r2dbc.password=postgres
      - logging.level.org.springframework.r2dbc=TRACE
      - logging.level.io.r2dbc.spi=TRACE
    depends_on:
      eureka-server:
        condition: service_started
      user-db:
        condition: service_healthy
    ports:
      - 8084:8084
    networks:
      - eureka-network
      - user-network
      
  auth-db:
    image: postgres
    container_name: auth-db
    volumes: 
    - auth-db-volume:/var/lib/postgresql/data
    - ./Backend/auth-service/init_script.sql:/docker-entrypoint-initdb.d/init_script.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=AuthDB
      - PGUSER=postgres
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "AuthDB"]
      interval: 30s
      timeout: 60s

  auth-service:
    build: ./Backend/auth-service
    container_name: auth-service
    environment:
      - server.port=8083
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - spring.r2dbc.url=r2dbc:postgresql://auth-db:5432/AuthDB
      - spring.r2dbc.username=postgres
      - spring.r2dbc.password=postgres
      - logging.level.org.springframework.r2dbc=TRACE
      - logging.level.io.r2dbc.spi=TRACE
    depends_on:
      auth-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - 8083:8083
    networks:
      - eureka-network
      - auth-network

  author-db:
    image: postgres
    container_name: author-db
    volumes: 
    - author-db-volume:/var/lib/postgresql/data
    - ./Backend/author-service/init_script.sql:/docker-entrypoint-initdb.d/init_script.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=AuthorDB
      - PGUSER=postgres
    networks:
      - author-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "AuthorDB"]
      interval: 30s
      timeout: 60s

  author-service:
    build: ./Backend/author-service
    container_name: author-service
    environment:
      - server.port=8082
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - file.temp=/home/app/temp/
      - spring.r2dbc.url=r2dbc:postgresql://author-db:5432/AuthorDB
      - spring.r2dbc.username=postgres
      - spring.r2dbc.password=postgres
      - logging.level.org.springframework.r2dbc=TRACE
      - logging.level.io.r2dbc.spi=TRACE
    networks:
      - author-network
      - eureka-network
    ports: 
      - 8082:8082
    depends_on:
      eureka-server:
        condition: service_started
      author-db:
        condition: service_healthy
    
  kafka:
    image: bitnami/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
 
  
  track-db:
    image: postgres
    container_name: track-db
    volumes: 
    - track-db-volume:/var/lib/postgresql/data
    - ./Backend/track-service/init_script.sql:/docker-entrypoint-initdb.d/init_script.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=TrackDB
      - PGUSER=postgres
    networks:
      - track-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "TrackDB"]
      interval: 30s
      timeout: 60s
  
  track-service:
    build: ./Backend/track-service
    container_name: track-service
    ports:
      - 8081:8081
    environment:
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - file.temp=/home/app/temp/
      - server.port=8081
      - spring.r2dbc.url=r2dbc:postgresql://track-db:5432/TrackDB
      - spring.r2dbc.username=postgres
      - spring.r2dbc.password=postgres
      - spring.kafka.bootstrap-servers=kafka:9092
      - logging.level.org.springframework.r2dbc=TRACE
      - logging.level.io.r2dbc.spi=TRACE
    depends_on:
      eureka-server:
        condition: service_started
      kafka:
        condition: service_started
      track-db:
        condition: service_healthy
    networks:
      - eureka-network
      - track-network
      - kafka-network

  playlist-db:
    image: postgres
    container_name: playlist_db
    volumes: 
    - playlist-db-volume:/var/lib/postgresql/data
    - ./Backend/playlist-service/init_script.sql:/docker-entrypoint-initdb.d/init_script.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=PlaylistDB
      - PGUSER=postgres
    networks:
      - playlist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "PlaylistDB"]
      interval: 30s
      timeout: 60s

  playlist-service:
    build: ./Backend/playlist-service
    container_name: playlist-service
    environment:
      - eureka.instance.preferIpAddress=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - file.temp=/home/app/temp/
      - spring.r2dbc.url=r2dbc:postgresql://playlist-db:5432/PlaylistDB
      - spring.r2dbc.username=postgres
      - spring.r2dbc.password=postgres
      - spring.kafka.bootstrap-servers=kafka:9092
      - logging.level.org.springframework.r2dbc=TRACE
      - logging.level.io.r2dbc.spi=TRACE
    depends_on:
      eureka-server:
        condition: service_started
      kafka:
        condition: service_started
      playlist-db:
        condition: service_healthy
    networks:
      - eureka-network
      - playlist-network
      - kafka-network
